%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Copyright (C) 2016 N. Eamon Gaffney
%%
%% This program is free software; you can resdistribute and/or modify it under
%% the terms of the MIT license, a copy of which should have been included with
%% this program at https://github.com/arminalaghi/scsynth
%%
%% References:
%% Qian, W., Li, X., Riedel, M. D., Bazargan, K., & Lilja, D. J. (2011). An
%% Architecture for Fault-Tolerant Computation with Stochastic Logic. IEEE
%% Transactions on Computers IEEE Trans. Comput., 60(1), 93-105.
%% doi:10.1109/tc.2010.202
%%
%% Qian, W., & Riedel, M.D.. (2010). The Synthesis of Stochastic Logic to
%% Perform Multivariate Polynomial Arithmetic.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function VerilogCoreMultivariateReSCGenerator (degrees, moduleName)

  %Generates a multivariate ReSC module in verilog whose inputs and outputs
  %remain in stochastic format
  
  %Parameters:
  % degrees   : the degrees of the Bernstein polynomials
  % moduleName: the name of the verilog module
  
  fileName = sprintf('%s.v', moduleName);
  header = ['/*\n * This file was generated by the scsynth tool, and is ava',...
            'ilablefor use under\n * the MIT license. More information can ',...
            'be found at\n * https://github.com/arminalaghi/scsynth/\n */\n'];
  
  fp = fopen(fileName, 'w');
  
  fprintf(fp, header);
  fprintf(fp, 'module %s( //the stochastic core of an ReSC\n', moduleName);
  for i=1:length(degrees)
	  fprintf(fp, '\tinput [%d:0] x_%d, //independent copies of x_%d\n',...
            degrees(i) - 1, i, i);
  end
  fprintf(fp, '\tinput [%d:0] w, //Bernstein coefficients\n',...
          prod(degrees+1)-1);
  fprintf(fp, '\toutput reg z //output bitsream\n);\n\n');

  bits = ceil(log2(degrees));
  for i=1:length(degrees)
	  fprintf(fp, '\twire [%d:0] sum_%d; //sum of x values for mux\n',...
            bits(i) - 1, i); 
	  fprintf(fp, '\tassign sum_%d = x_%d[0]', i, i);
    for j=1:degrees(i) - 1
      fprintf(fp, ' + x_%d[%d]', i, j);
    end
    fprintf(fp, ';\n\n');
  end
  
	fprintf(fp, '\talways @(*) begin\n');
  RecursiveCaseBuilder(fp, degrees, bits, 0, 1, 0, sprintf('\t\t'));
	fprintf(fp, '\tend\n');
  fprintf(fp, 'endmodule\n');
  
  fclose(fp);
end
