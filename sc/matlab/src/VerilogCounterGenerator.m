%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Copyright (C) 2016 N. Eamon Gaffney
%%
%% This program is free software; you can resdistribute and/or modify it under
%% the terms of the MIT license, a copy of which should have been included with
%% this program at https://github.com/arminalaghi/scsynth
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function VerilogCounterGenerator (bits, reverse, moduleName)

    %generates an n-bit verilog counter
    %Parameters:
    % bits      : the length of the counter
    % reverse   : if true, reverses the output order of the bits
    % addZero   : if 0, produces a normal LFSR which does not have the
    %             all-zero state, if 1, artificially adds an all-zero state
    %             (useful in SC)
    % moduleName: the name of the verilog module

	fileName = sprintf('%s.v', moduleName);
  header = ['/*\n * This file was generated by the scsynth tool, and is ava',...
            'ilablefor use under\n * the MIT license. More information can ',...
            'be found at\n * https://github.com/arminalaghi/scsynth/\n */\n'];
  
  fp = fopen(fileName, 'w');

  fprintf(fp, header);
	fprintf(fp, 'module %s(//%d bit counter\n', moduleName, bits);

	fprintf(fp, '\toutput [%d:0] out,\n', bits-1);
	fprintf(fp, '\tinput enable, //When on, new state every clock cycle\n');
  fprintf(fp, '\tinput restart, //Restart the LFSR at its seed state\n\n');
  fprintf(fp, '\tinput reset,\n');
  fprintf(fp, '\tinput clk\n');
  fprintf(fp, ');\n');

	fprintf(fp, '\treg [%d:0] value;\n', bits-1);
	fprintf(fp, '\talways @(posedge clk or posedge reset) begin\n');
	fprintf(fp, '\t\tif (reset) value <= 0;\n');
  fprintf(fp, '\t\telse if (restart) value <= 0;\n');
	fprintf(fp, '\t\telse if (enable) value = value + 1;\n');
	fprintf(fp, '\tend\n');
  
  if reverse
    fprintf(fp, '\tgenvar i;\n');
    fprintf(fp, '\tgenerate\n');
    fprintf(fp, '\t\tfor (i=0; i<%d; i=i+1) assign out[i] = value[%d-i];\n',...
            bits, bits-1);
    fprintf(fp, '\tendgenerate\n');
  else
    fprintf(fp, '\tassign out = value;\n');
  end
   
   fprintf(fp, 'endmodule\n');
   
   fclose(fp);
end
